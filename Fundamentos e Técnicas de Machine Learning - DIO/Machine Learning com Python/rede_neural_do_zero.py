# -*- coding: utf-8 -*-
"""Rede-Neural-do-Zero.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tdCVeAHIjLqdiXASP0b8harAYWcpF8ni
"""

import numpy as np
import torch
import torch.nn.functional as nf # Funcitons para as redes
import torchvision # Comp vision
import matplotlib.pyplot as plt
from time import time # Trabalhar com valores de tempo do nosso algoritmo
from torchvision import datasets, transforms
from torch import nn, optim

transform = transforms.ToTensor() # definindo a conversão de imagem para tensor

trainset = datasets.MNIST('./MNIST_data/', download=True, train=True, transform=transform) # Carrega a parte do treino do dataaset
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True) # Cria um buffer para pegar os dados por partes

valset = datasets.MNIST('./MNIST_data/', download=True, train=False, transform=transform) # Carregaa a parte de validação
valloader = torch.utils.data.DataLoader(valset, batch_size=64, shuffle=True) # Cria um buffer para pegar os dados por partes

dataiter = iter(trainloader)
imagens, etiquetas = next(dataiter)
plt.imshow(imagens[0].numpy().squeeze(), cmap='gray_r');

print(imagens[0].shape) # Para verificar as dimensões do tensor de cada imagem
print(etiquetas[0].shape) # Paara verificar as dimensões de cada etiqueta

class Modelo(nn.Module):
  def __init__(self):
    super(Modelo, self).__init__()
    self.linear1 = nn.Linear(28*28, 128) # camada de entrada, 784 neurônios que se ligam a 128
    self.linear2 = nn.Linear(128, 64) # camada interna 1, 128 neurônios que se ligam a 64
    self.linear3 = nn.Linear(64, 10) # camada interna 2, 64 neurônios que se ligam a 10
    # para a camada de saída nao é necessário definir nada pois só precisamos pegar o output da camada interna 2

    def forward(self,X):
      X = F.relu(self.linear1(X)) # função de ativação da camada de entrada para a camada interna 1
      X = F.relu(self.linear1(X)) # função de ativação da camada interna 1 para a camada interna 2
      X = self.linear3(X) #  # função de ativação da camada interna 2 para a camada de saída, nesse caso f(x) = x
      return F.log_softmax(X, dim=1) # dados utilizados para calcular a perda

def treino(modelo, trainloader, device):

  otimizador = optim.SGD(modelo.parameters(), lr=0.01, momentum=0.5) # define a politica de atualziacao dos pesos e da bias
  inicio = time() # timer para sabermos quanto tempo levou o treino

  criterio = nn.NLLLoss*() # definindo o criterio para calcular a perda
  EPOCHS = 10 # numero de epochs que o algoritmo rodará
  modelo.train() # ativando o modo de treinamento do modelo

  for epoch in range(EPOCHS):
    perda_acumulada = 0 # inicializacao da perda acumulada da epoch em questao

    for imagens, etiquetas in trainloader:

      imagens = imagens.view(imagens.shape[0], -1) # convertendo as imagens para vetores de 28*28 casas
      otimizador.zero.grad() # zerando os gradientes por conta do ciclo anterior

      output = modelo(imagens.to(device)) # colocando os dados no modelo
      perda_instantanea = criterio(output, etiquetas.to(device)) # calculando a perda da epoch em questao

      perda_instantanea.backward() # bacaka propagation a partir da perda

      otimizador.step() # atualizando os pesos e a bias

      perda_acumulada += perda_instantanea.item() # atualizacao da perda acumulada

    else:
       print("Epoch {} - Perda Resultante: {}".format(epoch+1, perda_acumulada/len(trainloader)))
  print("\nTempo de treino (em minutos) =",(time()-inicio)/60)

def validacao(modelo, valloader, device):
  conta_corretas, conta_todas = 0, 0
  for imagens, etiquetas in valloader:
    for i in range(len(etiquetas)):
      img = imagens[i].view(1, 784)
      # desativar o autogrand para acelerar a validacao, grafos computacionais dinamicos tem um custo alto de processamento
      with torch.no_grad():
        logps = modelo(img.to(device)) # output do modelo em escal logaritmica

      ps = torch.exp(logps) # converte o output para escala normal (lembrando que eh um tensor)
      probab = list(ps.cpu().numpy()[0])
      etiqueta_pred = probab.index(max(probab)) # converte o tensor em um numnero, no caso, o numero que o modelo previu
      etiqueta_certa = etiquetas.numpy()[1]
      if(etiqueta_certa == etiqueta_pred): # compara a previsao com o valor correto
        conta_corretas += 1
      conta_todas += 1

  print("Total de imagens testadas =", conta_todas)
  print("\nPrecisão do modelo = {}%".format(conta_corretas*100/conta_todas))

modelo = Modelo() # inicializa o modelo
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
modelo.to(device)